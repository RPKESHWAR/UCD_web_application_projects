{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "get format for datetime inputs [dateInput = [date hour minute year month1 month2 .... month12]] <br>\n",
    "day of week dropped"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Data Preparation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "hideCode": false,
    "hidePrompt": false
   },
   "outputs": [],
   "source": [
    "# Import pandas, numpy, matplotlib, seaborn libraries\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import datetime\n",
    "\n",
    "# Using Skicit-learn to split data into training and testing sets\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.feature_extraction import DictVectorizer\n",
    "from sklearn.ensemble import RandomForestRegressor\n",
    "from sklearn import metrics\n",
    "from sklearn import preprocessing\n",
    "import pickle\n",
    "\n",
    "# hide ipykernel warnings \n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')\n",
    "\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Import data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Import weather dynamic data from csv into dataframe"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>main_temp</th>\n",
       "      <th>main_feels_like</th>\n",
       "      <th>main_pressure</th>\n",
       "      <th>main_humidity</th>\n",
       "      <th>main_temp_min</th>\n",
       "      <th>main_temp_max</th>\n",
       "      <th>wind_speed</th>\n",
       "      <th>wind_deg</th>\n",
       "      <th>data_entry_timestamp</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>3437</th>\n",
       "      <td>10</td>\n",
       "      <td>7</td>\n",
       "      <td>1018</td>\n",
       "      <td>66</td>\n",
       "      <td>8</td>\n",
       "      <td>12</td>\n",
       "      <td>2.6</td>\n",
       "      <td>150.0</td>\n",
       "      <td>8/24/2020 10:40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3438</th>\n",
       "      <td>11</td>\n",
       "      <td>9</td>\n",
       "      <td>1017</td>\n",
       "      <td>58</td>\n",
       "      <td>9</td>\n",
       "      <td>12</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>9/24/2020 10:50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3439</th>\n",
       "      <td>11</td>\n",
       "      <td>9</td>\n",
       "      <td>1017</td>\n",
       "      <td>58</td>\n",
       "      <td>9</td>\n",
       "      <td>12</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>10/24/2020 0:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3440</th>\n",
       "      <td>11</td>\n",
       "      <td>9</td>\n",
       "      <td>1017</td>\n",
       "      <td>58</td>\n",
       "      <td>9</td>\n",
       "      <td>12</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>11/24/2020 11:10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3441</th>\n",
       "      <td>11</td>\n",
       "      <td>7</td>\n",
       "      <td>1017</td>\n",
       "      <td>62</td>\n",
       "      <td>10</td>\n",
       "      <td>12</td>\n",
       "      <td>4.1</td>\n",
       "      <td>200.0</td>\n",
       "      <td>12/24/2020 11:20</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      main_temp  main_feels_like  main_pressure  main_humidity  main_temp_min  \\\n",
       "3437         10                7           1018             66              8   \n",
       "3438         11                9           1017             58              9   \n",
       "3439         11                9           1017             58              9   \n",
       "3440         11                9           1017             58              9   \n",
       "3441         11                7           1017             62             10   \n",
       "\n",
       "      main_temp_max  wind_speed  wind_deg data_entry_timestamp  \n",
       "3437             12         2.6     150.0      8/24/2020 10:40  \n",
       "3438             12         1.0       NaN      9/24/2020 10:50  \n",
       "3439             12         1.0       NaN      10/24/2020 0:00  \n",
       "3440             12         1.0       NaN     11/24/2020 11:10  \n",
       "3441             12         4.1     200.0     12/24/2020 11:20  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Read in data as pandas dataframe and display first 5 rows\n",
    "weatherDynamic = pd.read_csv('dWeatherD.csv')\n",
    "weatherDynamic.reset_index(drop=True)\n",
    "weatherDynamic = weatherDynamic[['main_temp','main_feels_like',\\\n",
    "                               'main_pressure','main_humidity','main_temp_min', 'main_temp_max', \\\n",
    "                                'wind_speed', 'wind_deg','data_entry_timestamp']]\n",
    "weatherDynamic.reset_index(drop=True)\n",
    "\n",
    "weatherDynamic.tail(5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### check for shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "hideCode": false,
    "hidePrompt": false,
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The shape of our features is: (3442, 9) \n",
      " main_temp                 int64\n",
      "main_feels_like           int64\n",
      "main_pressure             int64\n",
      "main_humidity             int64\n",
      "main_temp_min             int64\n",
      "main_temp_max             int64\n",
      "wind_speed              float64\n",
      "wind_deg                float64\n",
      "data_entry_timestamp     object\n",
      "dtype: object\n"
     ]
    }
   ],
   "source": [
    "print('The shape of our features is:', weatherDynamic.shape,'\\n', weatherDynamic.dtypes)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### check for Null entries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "main_temp                 0\n",
       "main_feels_like           0\n",
       "main_pressure             0\n",
       "main_humidity             0\n",
       "main_temp_min             0\n",
       "main_temp_max             0\n",
       "wind_speed                0\n",
       "wind_deg                112\n",
       "data_entry_timestamp      0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "weatherDynamic.isnull().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Fill Null entries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "weatherDynamic.loc[weatherDynamic['wind_deg'].isnull(),('wind_deg')] = weatherDynamic['wind_deg'].ffill()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "main_temp               0\n",
       "main_feels_like         0\n",
       "main_pressure           0\n",
       "main_humidity           0\n",
       "main_temp_min           0\n",
       "main_temp_max           0\n",
       "wind_speed              0\n",
       "wind_deg                0\n",
       "data_entry_timestamp    0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "weatherDynamic.isnull().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Process and normalise dates"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Observation on spreadsheet state that results for date 28 February and 24 March are patial. Hence, they are to be dropped for data consistency.** "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### dublin weather"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>main_temp</th>\n",
       "      <th>main_feels_like</th>\n",
       "      <th>main_pressure</th>\n",
       "      <th>main_humidity</th>\n",
       "      <th>main_temp_min</th>\n",
       "      <th>main_temp_max</th>\n",
       "      <th>wind_speed</th>\n",
       "      <th>wind_deg</th>\n",
       "      <th>data_entry_timestamp</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>3437</th>\n",
       "      <td>10</td>\n",
       "      <td>7</td>\n",
       "      <td>1018</td>\n",
       "      <td>66</td>\n",
       "      <td>8</td>\n",
       "      <td>12</td>\n",
       "      <td>2.6</td>\n",
       "      <td>150.0</td>\n",
       "      <td>2020-08-24 10:40:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3438</th>\n",
       "      <td>11</td>\n",
       "      <td>9</td>\n",
       "      <td>1017</td>\n",
       "      <td>58</td>\n",
       "      <td>9</td>\n",
       "      <td>12</td>\n",
       "      <td>1.0</td>\n",
       "      <td>150.0</td>\n",
       "      <td>2020-09-24 10:50:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3439</th>\n",
       "      <td>11</td>\n",
       "      <td>9</td>\n",
       "      <td>1017</td>\n",
       "      <td>58</td>\n",
       "      <td>9</td>\n",
       "      <td>12</td>\n",
       "      <td>1.0</td>\n",
       "      <td>150.0</td>\n",
       "      <td>2020-10-24 00:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3440</th>\n",
       "      <td>11</td>\n",
       "      <td>9</td>\n",
       "      <td>1017</td>\n",
       "      <td>58</td>\n",
       "      <td>9</td>\n",
       "      <td>12</td>\n",
       "      <td>1.0</td>\n",
       "      <td>150.0</td>\n",
       "      <td>2020-11-24 11:10:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3441</th>\n",
       "      <td>11</td>\n",
       "      <td>7</td>\n",
       "      <td>1017</td>\n",
       "      <td>62</td>\n",
       "      <td>10</td>\n",
       "      <td>12</td>\n",
       "      <td>4.1</td>\n",
       "      <td>200.0</td>\n",
       "      <td>2020-12-24 11:20:00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      main_temp  main_feels_like  main_pressure  main_humidity  main_temp_min  \\\n",
       "3437         10                7           1018             66              8   \n",
       "3438         11                9           1017             58              9   \n",
       "3439         11                9           1017             58              9   \n",
       "3440         11                9           1017             58              9   \n",
       "3441         11                7           1017             62             10   \n",
       "\n",
       "      main_temp_max  wind_speed  wind_deg data_entry_timestamp  \n",
       "3437             12         2.6     150.0  2020-08-24 10:40:00  \n",
       "3438             12         1.0     150.0  2020-09-24 10:50:00  \n",
       "3439             12         1.0     150.0  2020-10-24 00:00:00  \n",
       "3440             12         1.0     150.0  2020-11-24 11:10:00  \n",
       "3441             12         4.1     200.0  2020-12-24 11:20:00  "
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#DATETIME DATA\n",
    "\n",
    "# Select columns containing datetime data\n",
    "continous_date_columns = weatherDynamic[['data_entry_timestamp']].columns\n",
    "\n",
    "# Assign object type datetime to columns enlisted in continous_date_columns\n",
    "for column in continous_date_columns:\n",
    "    weatherDynamic[column] = pd.to_datetime(weatherDynamic[column])   \n",
    "    \n",
    "# end_date = pd.to_datetime('2020-03-24')\n",
    "# start_date = pd.to_datetime('2020-02-28')\n",
    "\n",
    "# # Ommit partial data for dates 28-2-2020 and 24-3-2020\n",
    "# mask = (weatherDynamic['data_entry_timestamp'].dt.date > start_date) & (weatherDynamic['data_entry_timestamp'].dt.date < end_date)\n",
    "# weatherDynamic = weatherDynamic.loc[mask]\n",
    "\n",
    "# for column in continous_date_columns:\n",
    "#     weatherDynamic[column] = pd.to_datetime(weatherDynamic[column])   \n",
    "    \n",
    "weatherDynamic.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "hideCode": false,
    "hidePrompt": false,
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The shape of our features is: (3442, 9) \n",
      " main_temp                        int64\n",
      "main_feels_like                  int64\n",
      "main_pressure                    int64\n",
      "main_humidity                    int64\n",
      "main_temp_min                    int64\n",
      "main_temp_max                    int64\n",
      "wind_speed                     float64\n",
      "wind_deg                       float64\n",
      "data_entry_timestamp    datetime64[ns]\n",
      "dtype: object\n"
     ]
    }
   ],
   "source": [
    "print('The shape of our features is:', weatherDynamic.shape,'\\n', weatherDynamic.dtypes)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>main_temp</th>\n",
       "      <th>main_feels_like</th>\n",
       "      <th>main_pressure</th>\n",
       "      <th>main_humidity</th>\n",
       "      <th>main_temp_min</th>\n",
       "      <th>main_temp_max</th>\n",
       "      <th>wind_speed</th>\n",
       "      <th>wind_deg</th>\n",
       "      <th>data_entry_timestamp</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>12</td>\n",
       "      <td>7</td>\n",
       "      <td>987</td>\n",
       "      <td>87</td>\n",
       "      <td>11</td>\n",
       "      <td>14</td>\n",
       "      <td>7.2</td>\n",
       "      <td>250.0</td>\n",
       "      <td>2020-02-28 15:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>12</td>\n",
       "      <td>7</td>\n",
       "      <td>987</td>\n",
       "      <td>87</td>\n",
       "      <td>11</td>\n",
       "      <td>14</td>\n",
       "      <td>7.2</td>\n",
       "      <td>250.0</td>\n",
       "      <td>2020-02-28 15:10:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>11</td>\n",
       "      <td>6</td>\n",
       "      <td>987</td>\n",
       "      <td>87</td>\n",
       "      <td>11</td>\n",
       "      <td>12</td>\n",
       "      <td>7.2</td>\n",
       "      <td>250.0</td>\n",
       "      <td>2020-02-28 15:20:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>12</td>\n",
       "      <td>5</td>\n",
       "      <td>987</td>\n",
       "      <td>71</td>\n",
       "      <td>11</td>\n",
       "      <td>12</td>\n",
       "      <td>8.2</td>\n",
       "      <td>250.0</td>\n",
       "      <td>2020-02-28 15:30:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>12</td>\n",
       "      <td>5</td>\n",
       "      <td>987</td>\n",
       "      <td>71</td>\n",
       "      <td>11</td>\n",
       "      <td>12</td>\n",
       "      <td>8.2</td>\n",
       "      <td>250.0</td>\n",
       "      <td>2020-02-28 15:40:00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   main_temp  main_feels_like  main_pressure  main_humidity  main_temp_min  \\\n",
       "0         12                7            987             87             11   \n",
       "1         12                7            987             87             11   \n",
       "2         11                6            987             87             11   \n",
       "3         12                5            987             71             11   \n",
       "4         12                5            987             71             11   \n",
       "\n",
       "   main_temp_max  wind_speed  wind_deg data_entry_timestamp  \n",
       "0             14         7.2     250.0  2020-02-28 15:00:00  \n",
       "1             14         7.2     250.0  2020-02-28 15:10:00  \n",
       "2             12         7.2     250.0  2020-02-28 15:20:00  \n",
       "3             12         8.2     250.0  2020-02-28 15:30:00  \n",
       "4             12         8.2     250.0  2020-02-28 15:40:00  "
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "weatherDynamic.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "hideCode": false,
    "hidePrompt": false,
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The shape of our features is: (3442, 9) \n",
      " main_temp                        int64\n",
      "main_feels_like                  int64\n",
      "main_pressure                    int64\n",
      "main_humidity                    int64\n",
      "main_temp_min                    int64\n",
      "main_temp_max                    int64\n",
      "wind_speed                     float64\n",
      "wind_deg                       float64\n",
      "data_entry_timestamp    datetime64[ns]\n",
      "dtype: object\n"
     ]
    }
   ],
   "source": [
    "print('The shape of our features is:', weatherDynamic.shape,'\\n', weatherDynamic.dtypes)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Resolve date into time components"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Drop 'last_update' feature\n",
    "weatherDynamic['year'] = weatherDynamic.data_entry_timestamp.dt.year \n",
    "weatherDynamic['Day'] = weatherDynamic.data_entry_timestamp.dt.day\n",
    "weatherDynamic['month'] = weatherDynamic.data_entry_timestamp.dt.month\n",
    "weatherDynamic['hour'] = weatherDynamic.data_entry_timestamp.dt.hour\n",
    "weatherDynamic['minute'] = weatherDynamic.data_entry_timestamp.dt.minute\n",
    "weatherDynamic = weatherDynamic.drop(['data_entry_timestamp'], axis=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Set Data types prior to encoding"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>main_temp</th>\n",
       "      <th>main_feels_like</th>\n",
       "      <th>main_pressure</th>\n",
       "      <th>main_humidity</th>\n",
       "      <th>main_temp_min</th>\n",
       "      <th>main_temp_max</th>\n",
       "      <th>wind_speed</th>\n",
       "      <th>wind_deg</th>\n",
       "      <th>year</th>\n",
       "      <th>Day</th>\n",
       "      <th>month</th>\n",
       "      <th>hour</th>\n",
       "      <th>minute</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>12</td>\n",
       "      <td>7</td>\n",
       "      <td>987</td>\n",
       "      <td>87</td>\n",
       "      <td>11</td>\n",
       "      <td>14</td>\n",
       "      <td>7.2</td>\n",
       "      <td>250.0</td>\n",
       "      <td>2020</td>\n",
       "      <td>28</td>\n",
       "      <td>2</td>\n",
       "      <td>15</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>12</td>\n",
       "      <td>7</td>\n",
       "      <td>987</td>\n",
       "      <td>87</td>\n",
       "      <td>11</td>\n",
       "      <td>14</td>\n",
       "      <td>7.2</td>\n",
       "      <td>250.0</td>\n",
       "      <td>2020</td>\n",
       "      <td>28</td>\n",
       "      <td>2</td>\n",
       "      <td>15</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>11</td>\n",
       "      <td>6</td>\n",
       "      <td>987</td>\n",
       "      <td>87</td>\n",
       "      <td>11</td>\n",
       "      <td>12</td>\n",
       "      <td>7.2</td>\n",
       "      <td>250.0</td>\n",
       "      <td>2020</td>\n",
       "      <td>28</td>\n",
       "      <td>2</td>\n",
       "      <td>15</td>\n",
       "      <td>20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>12</td>\n",
       "      <td>5</td>\n",
       "      <td>987</td>\n",
       "      <td>71</td>\n",
       "      <td>11</td>\n",
       "      <td>12</td>\n",
       "      <td>8.2</td>\n",
       "      <td>250.0</td>\n",
       "      <td>2020</td>\n",
       "      <td>28</td>\n",
       "      <td>2</td>\n",
       "      <td>15</td>\n",
       "      <td>30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>12</td>\n",
       "      <td>5</td>\n",
       "      <td>987</td>\n",
       "      <td>71</td>\n",
       "      <td>11</td>\n",
       "      <td>12</td>\n",
       "      <td>8.2</td>\n",
       "      <td>250.0</td>\n",
       "      <td>2020</td>\n",
       "      <td>28</td>\n",
       "      <td>2</td>\n",
       "      <td>15</td>\n",
       "      <td>40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3437</th>\n",
       "      <td>10</td>\n",
       "      <td>7</td>\n",
       "      <td>1018</td>\n",
       "      <td>66</td>\n",
       "      <td>8</td>\n",
       "      <td>12</td>\n",
       "      <td>2.6</td>\n",
       "      <td>150.0</td>\n",
       "      <td>2020</td>\n",
       "      <td>24</td>\n",
       "      <td>8</td>\n",
       "      <td>10</td>\n",
       "      <td>40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3438</th>\n",
       "      <td>11</td>\n",
       "      <td>9</td>\n",
       "      <td>1017</td>\n",
       "      <td>58</td>\n",
       "      <td>9</td>\n",
       "      <td>12</td>\n",
       "      <td>1.0</td>\n",
       "      <td>150.0</td>\n",
       "      <td>2020</td>\n",
       "      <td>24</td>\n",
       "      <td>9</td>\n",
       "      <td>10</td>\n",
       "      <td>50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3439</th>\n",
       "      <td>11</td>\n",
       "      <td>9</td>\n",
       "      <td>1017</td>\n",
       "      <td>58</td>\n",
       "      <td>9</td>\n",
       "      <td>12</td>\n",
       "      <td>1.0</td>\n",
       "      <td>150.0</td>\n",
       "      <td>2020</td>\n",
       "      <td>24</td>\n",
       "      <td>10</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3440</th>\n",
       "      <td>11</td>\n",
       "      <td>9</td>\n",
       "      <td>1017</td>\n",
       "      <td>58</td>\n",
       "      <td>9</td>\n",
       "      <td>12</td>\n",
       "      <td>1.0</td>\n",
       "      <td>150.0</td>\n",
       "      <td>2020</td>\n",
       "      <td>24</td>\n",
       "      <td>11</td>\n",
       "      <td>11</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3441</th>\n",
       "      <td>11</td>\n",
       "      <td>7</td>\n",
       "      <td>1017</td>\n",
       "      <td>62</td>\n",
       "      <td>10</td>\n",
       "      <td>12</td>\n",
       "      <td>4.1</td>\n",
       "      <td>200.0</td>\n",
       "      <td>2020</td>\n",
       "      <td>24</td>\n",
       "      <td>12</td>\n",
       "      <td>11</td>\n",
       "      <td>20</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3442 rows × 13 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      main_temp  main_feels_like  main_pressure  main_humidity  main_temp_min  \\\n",
       "0            12                7            987             87             11   \n",
       "1            12                7            987             87             11   \n",
       "2            11                6            987             87             11   \n",
       "3            12                5            987             71             11   \n",
       "4            12                5            987             71             11   \n",
       "...         ...              ...            ...            ...            ...   \n",
       "3437         10                7           1018             66              8   \n",
       "3438         11                9           1017             58              9   \n",
       "3439         11                9           1017             58              9   \n",
       "3440         11                9           1017             58              9   \n",
       "3441         11                7           1017             62             10   \n",
       "\n",
       "      main_temp_max  wind_speed  wind_deg  year  Day  month  hour  minute  \n",
       "0                14         7.2     250.0  2020   28      2    15       0  \n",
       "1                14         7.2     250.0  2020   28      2    15      10  \n",
       "2                12         7.2     250.0  2020   28      2    15      20  \n",
       "3                12         8.2     250.0  2020   28      2    15      30  \n",
       "4                12         8.2     250.0  2020   28      2    15      40  \n",
       "...             ...         ...       ...   ...  ...    ...   ...     ...  \n",
       "3437             12         2.6     150.0  2020   24      8    10      40  \n",
       "3438             12         1.0     150.0  2020   24      9    10      50  \n",
       "3439             12         1.0     150.0  2020   24     10     0       0  \n",
       "3440             12         1.0     150.0  2020   24     11    11      10  \n",
       "3441             12         4.1     200.0  2020   24     12    11      20  \n",
       "\n",
       "[3442 rows x 13 columns]"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "weatherDynamic.reset_index(drop=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "hideCode": false,
    "hidePrompt": false,
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The shape of our features is: (3442, 13)\n",
      "main_temp            int64\n",
      "main_feels_like      int64\n",
      "main_pressure        int64\n",
      "main_humidity        int64\n",
      "main_temp_min        int64\n",
      "main_temp_max        int64\n",
      "wind_speed         float64\n",
      "wind_deg           float64\n",
      "year                 int64\n",
      "Day                  int64\n",
      "month                int64\n",
      "hour                 int64\n",
      "minute               int64\n",
      "dtype: object\n"
     ]
    }
   ],
   "source": [
    "print('The shape of our features is:', weatherDynamic.shape)\n",
    "print(weatherDynamic.dtypes)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Assign data type category to columns listed in categorical_columns\n",
    "categorical_columns = weatherDynamic[['year','month']].columns\n",
    "for column in categorical_columns:\n",
    "    weatherDynamic[column] = weatherDynamic[column].astype('category') "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "hideCode": false,
    "hidePrompt": false,
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The shape of our features is: (3442, 13)\n",
      "main_temp             int64\n",
      "main_feels_like       int64\n",
      "main_pressure         int64\n",
      "main_humidity         int64\n",
      "main_temp_min         int64\n",
      "main_temp_max         int64\n",
      "wind_speed          float64\n",
      "wind_deg            float64\n",
      "year               category\n",
      "Day                   int64\n",
      "month              category\n",
      "hour                  int64\n",
      "minute                int64\n",
      "dtype: object\n"
     ]
    }
   ],
   "source": [
    "print('The shape of our features is:', weatherDynamic.shape)\n",
    "print(weatherDynamic.dtypes)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>main_temp</th>\n",
       "      <th>main_feels_like</th>\n",
       "      <th>main_pressure</th>\n",
       "      <th>main_humidity</th>\n",
       "      <th>main_temp_min</th>\n",
       "      <th>main_temp_max</th>\n",
       "      <th>wind_speed</th>\n",
       "      <th>wind_deg</th>\n",
       "      <th>year</th>\n",
       "      <th>Day</th>\n",
       "      <th>month</th>\n",
       "      <th>hour</th>\n",
       "      <th>minute</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>12</td>\n",
       "      <td>7</td>\n",
       "      <td>987</td>\n",
       "      <td>87</td>\n",
       "      <td>11</td>\n",
       "      <td>14</td>\n",
       "      <td>7.2</td>\n",
       "      <td>250.0</td>\n",
       "      <td>2020</td>\n",
       "      <td>28</td>\n",
       "      <td>2</td>\n",
       "      <td>15</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>12</td>\n",
       "      <td>7</td>\n",
       "      <td>987</td>\n",
       "      <td>87</td>\n",
       "      <td>11</td>\n",
       "      <td>14</td>\n",
       "      <td>7.2</td>\n",
       "      <td>250.0</td>\n",
       "      <td>2020</td>\n",
       "      <td>28</td>\n",
       "      <td>2</td>\n",
       "      <td>15</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>11</td>\n",
       "      <td>6</td>\n",
       "      <td>987</td>\n",
       "      <td>87</td>\n",
       "      <td>11</td>\n",
       "      <td>12</td>\n",
       "      <td>7.2</td>\n",
       "      <td>250.0</td>\n",
       "      <td>2020</td>\n",
       "      <td>28</td>\n",
       "      <td>2</td>\n",
       "      <td>15</td>\n",
       "      <td>20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>12</td>\n",
       "      <td>5</td>\n",
       "      <td>987</td>\n",
       "      <td>71</td>\n",
       "      <td>11</td>\n",
       "      <td>12</td>\n",
       "      <td>8.2</td>\n",
       "      <td>250.0</td>\n",
       "      <td>2020</td>\n",
       "      <td>28</td>\n",
       "      <td>2</td>\n",
       "      <td>15</td>\n",
       "      <td>30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>12</td>\n",
       "      <td>5</td>\n",
       "      <td>987</td>\n",
       "      <td>71</td>\n",
       "      <td>11</td>\n",
       "      <td>12</td>\n",
       "      <td>8.2</td>\n",
       "      <td>250.0</td>\n",
       "      <td>2020</td>\n",
       "      <td>28</td>\n",
       "      <td>2</td>\n",
       "      <td>15</td>\n",
       "      <td>40</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   main_temp  main_feels_like  main_pressure  main_humidity  main_temp_min  \\\n",
       "0         12                7            987             87             11   \n",
       "1         12                7            987             87             11   \n",
       "2         11                6            987             87             11   \n",
       "3         12                5            987             71             11   \n",
       "4         12                5            987             71             11   \n",
       "\n",
       "   main_temp_max  wind_speed  wind_deg  year  Day month  hour  minute  \n",
       "0             14         7.2     250.0  2020   28     2    15       0  \n",
       "1             14         7.2     250.0  2020   28     2    15      10  \n",
       "2             12         7.2     250.0  2020   28     2    15      20  \n",
       "3             12         8.2     250.0  2020   28     2    15      30  \n",
       "4             12         8.2     250.0  2020   28     2    15      40  "
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "weatherDynamic.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Encoding"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Dictionary vectorization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "dfMLweather_enc = pd.get_dummies(weatherDynamic, prefix_sep='_')\n",
    "# X head\n",
    "dfMLweather_enc.head()\n",
    "\n",
    "dfMLweather_enc.to_csv(\"WeatherGetDummiesCatagorical.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Shape of features after one-hot encoding: (3442, 24)\n"
     ]
    }
   ],
   "source": [
    "print('Shape of features after one-hot encoding:', dfMLweather_enc.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Normalization of numeric variables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "def normaliseDF(dfML):\n",
    "    # retain column headers\n",
    "    columnNames= dfML.columns\n",
    "    \n",
    "    dfMLFeatures = dfML.values\n",
    "    # Create a minimum and maximum processor object\n",
    "    min_max_scaler = preprocessing.MinMaxScaler()\n",
    "\n",
    "    # Create an object to transform the data to fit minmax processor\n",
    "    dfML_normalized = pd.DataFrame(min_max_scaler.fit_transform(dfMLFeatures), columns = columnNames)\n",
    "    \n",
    "    return dfML_normalized"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Training and Testing Sets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "def trainTestData(features, target):\n",
    "    # Split the data into training and testing sets\n",
    "    train_features, test_features, train_labels, test_labels = train_test_split(features, target, test_size = 0.25,\n",
    "                                                                               random_state = 42)\n",
    "    return train_features, test_features, train_labels, test_labels"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Establish Baseline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "# def baseLine(test_features, feature_list, target):\n",
    "#     # The baseline predictions are the historical averages\n",
    "#     baseline_preds = test_features[:, feature_list.index(target)]\n",
    "\n",
    "#     # Baseline errors, and display average baseline error\n",
    "#     baseline_errors = abs(baseline_preds - test_labels)\n",
    "#     print('Average baseline error: ', round(np.mean(baseline_errors), 2), 'degrees.')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Training the Forest"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "hideCode": false,
    "hidePrompt": false
   },
   "outputs": [],
   "source": [
    "def trainRandomForest(train_features, train_labels):\n",
    "    # Instantiate model \n",
    "    rf = RandomForestRegressor(n_estimators= 100, random_state=42)\n",
    "\n",
    "    # Train the random forest model\n",
    "    rf.fit(train_features, train_labels)\n",
    "    \n",
    "    return rf"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Model with different hyperparameters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "# rf_new = RandomForestRegressor(n_estimators = 100, criterion = 'mse', max_depth = None, \n",
    "#                                min_samples_split = 2, min_samples_leaf = 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Make Predictions on Test Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "def predictRandomForest(rf, test_features):\n",
    "    # Use the forest's predict method on the test data\n",
    "    predictions = rf.predict(test_features) \n",
    "    \n",
    "    return predictions"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## View Results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "def result(predictions,test_labels):\n",
    "    # Calculate the absolute errors\n",
    "    errors = abs(predictions - test_labels)\n",
    "\n",
    "    # Print out the mean absolute error (mae)\n",
    "    print('Mean Absolute Error:', round(np.mean(errors), 2), 'degrees.')\n",
    "    \n",
    "    \n",
    "    print('\\n==============================================================================')\n",
    "    print(\"MAE: \", metrics.mean_absolute_error(test_labels, predictions))\n",
    "    print(\"MSE: \", metrics.mean_squared_error(test_labels, predictions))        \n",
    "    print(\"RMSE: \", metrics.mean_squared_error(test_labels, predictions, squared=False))    \n",
    "    print(\"R2: \", metrics.r2_score(test_labels, predictions))\n",
    "\n",
    "    \n",
    "    plt.plot(test_labels[:10])\n",
    "    plt.plot(predictions[:10])\n",
    "    \n",
    "    plt.xlabel('Time')\n",
    "    plt.ylabel('Available stands')\n",
    "\n",
    "\n",
    "#     plt.xlabel('Time')\n",
    "#     plt.ylabel('Available stands')\n",
    "\n",
    "    plt.show()\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Variable Importances"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "def show_Importance(rf,features):\n",
    "    # Get numerical feature importances\n",
    "    importances = list(rf.feature_importances_)\n",
    "\n",
    "    # List of tuples with variable and importance\n",
    "    feature_importances = [(features, round(importance, 2)) for features, importance in zip(feature_list, importances)]\n",
    "\n",
    "    # Sort the feature importances by most important first\n",
    "    feature_importances = sorted(feature_importances, key = lambda x: x[1], reverse = True)\n",
    "\n",
    "    # Print out the feature and importances \n",
    "    [print('Variable: {:20} Importance: {}'.format(*pair)) for pair in feature_importances]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Pipeline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Input columns \n",
      " Day          int64\n",
      "hour         int64\n",
      "minute       int64\n",
      "year_2020    uint8\n",
      "month_1      uint8\n",
      "month_2      uint8\n",
      "month_3      uint8\n",
      "month_4      uint8\n",
      "month_5      uint8\n",
      "month_6      uint8\n",
      "month_7      uint8\n",
      "month_8      uint8\n",
      "month_9      uint8\n",
      "month_10     uint8\n",
      "month_11     uint8\n",
      "month_12     uint8\n",
      "dtype: object\n",
      "Target Feature: main_temp \n",
      "\n",
      "\n",
      "Training Features Shape: (2581, 16)\n",
      "Training Labels Shape: (2581,)\n",
      "Testing Features Shape: (861, 16)\n",
      "Testing Labels Shape: (861,)\n",
      "Mean Absolute Error: 0.26 degrees.\n",
      "\n",
      "==============================================================================\n",
      "MAE:  0.25653890824622533\n",
      "MSE:  0.17324018583042974\n",
      "RMSE:  0.4162213183276774\n",
      "R2:  0.9827697561003097\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Variable: Day                  Importance: 0.68\n",
      "Variable: hour                 Importance: 0.31\n",
      "Variable: minute               Importance: 0.01\n",
      "Variable: year_2020            Importance: 0.0\n",
      "Variable: month_1              Importance: 0.0\n",
      "Variable: month_2              Importance: 0.0\n",
      "Variable: month_3              Importance: 0.0\n",
      "Variable: month_4              Importance: 0.0\n",
      "Variable: month_5              Importance: 0.0\n",
      "Variable: month_6              Importance: 0.0\n",
      "Variable: month_7              Importance: 0.0\n",
      "Variable: month_8              Importance: 0.0\n",
      "Variable: month_9              Importance: 0.0\n",
      "Variable: month_10             Importance: 0.0\n",
      "Variable: month_11             Importance: 0.0\n",
      "Variable: month_12             Importance: 0.0\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "Target Feature: main_feels_like \n",
      "\n",
      "\n",
      "Training Features Shape: (2581, 16)\n",
      "Training Labels Shape: (2581,)\n",
      "Testing Features Shape: (861, 16)\n",
      "Testing Labels Shape: (861,)\n",
      "Mean Absolute Error: 0.43 degrees.\n",
      "\n",
      "==============================================================================\n",
      "MAE:  0.4259117305458769\n",
      "MSE:  0.5796256678281068\n",
      "RMSE:  0.7613315098090363\n",
      "R2:  0.9357914801850904\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Variable: Day                  Importance: 0.68\n",
      "Variable: hour                 Importance: 0.3\n",
      "Variable: minute               Importance: 0.02\n",
      "Variable: year_2020            Importance: 0.0\n",
      "Variable: month_1              Importance: 0.0\n",
      "Variable: month_2              Importance: 0.0\n",
      "Variable: month_3              Importance: 0.0\n",
      "Variable: month_4              Importance: 0.0\n",
      "Variable: month_5              Importance: 0.0\n",
      "Variable: month_6              Importance: 0.0\n",
      "Variable: month_7              Importance: 0.0\n",
      "Variable: month_8              Importance: 0.0\n",
      "Variable: month_9              Importance: 0.0\n",
      "Variable: month_10             Importance: 0.0\n",
      "Variable: month_11             Importance: 0.0\n",
      "Variable: month_12             Importance: 0.0\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "Target Feature: main_pressure \n",
      "\n",
      "\n",
      "Training Features Shape: (2581, 16)\n",
      "Training Labels Shape: (2581,)\n",
      "Testing Features Shape: (861, 16)\n",
      "Testing Labels Shape: (861,)\n",
      "Mean Absolute Error: 0.18 degrees.\n",
      "\n",
      "==============================================================================\n",
      "MAE:  0.1796051103368129\n",
      "MSE:  0.10644622531939603\n",
      "RMSE:  0.3262609773163135\n",
      "R2:  0.9994538929085117\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Variable: Day                  Importance: 0.9\n",
      "Variable: month_2              Importance: 0.06\n",
      "Variable: hour                 Importance: 0.04\n",
      "Variable: minute               Importance: 0.0\n",
      "Variable: year_2020            Importance: 0.0\n",
      "Variable: month_1              Importance: 0.0\n",
      "Variable: month_3              Importance: 0.0\n",
      "Variable: month_4              Importance: 0.0\n",
      "Variable: month_5              Importance: 0.0\n",
      "Variable: month_6              Importance: 0.0\n",
      "Variable: month_7              Importance: 0.0\n",
      "Variable: month_8              Importance: 0.0\n",
      "Variable: month_9              Importance: 0.0\n",
      "Variable: month_10             Importance: 0.0\n",
      "Variable: month_11             Importance: 0.0\n",
      "Variable: month_12             Importance: 0.0\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "Target Feature: main_humidity \n",
      "\n",
      "\n",
      "Training Features Shape: (2581, 16)\n",
      "Training Labels Shape: (2581,)\n",
      "Testing Features Shape: (861, 16)\n",
      "Testing Labels Shape: (861,)\n",
      "Mean Absolute Error: 2.56 degrees.\n",
      "\n",
      "==============================================================================\n",
      "MAE:  2.5559117305458763\n",
      "MSE:  14.003159117305458\n",
      "RMSE:  3.7420795177688913\n",
      "R2:  0.8732472418476456\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Variable: Day                  Importance: 0.51\n",
      "Variable: hour                 Importance: 0.42\n",
      "Variable: minute               Importance: 0.06\n",
      "Variable: month_2              Importance: 0.01\n",
      "Variable: year_2020            Importance: 0.0\n",
      "Variable: month_1              Importance: 0.0\n",
      "Variable: month_3              Importance: 0.0\n",
      "Variable: month_4              Importance: 0.0\n",
      "Variable: month_5              Importance: 0.0\n",
      "Variable: month_6              Importance: 0.0\n",
      "Variable: month_7              Importance: 0.0\n",
      "Variable: month_8              Importance: 0.0\n",
      "Variable: month_9              Importance: 0.0\n",
      "Variable: month_10             Importance: 0.0\n",
      "Variable: month_11             Importance: 0.0\n",
      "Variable: month_12             Importance: 0.0\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "Target Feature: main_temp_min \n",
      "\n",
      "\n",
      "Training Features Shape: (2581, 16)\n",
      "Training Labels Shape: (2581,)\n",
      "Testing Features Shape: (861, 16)\n",
      "Testing Labels Shape: (861,)\n",
      "Mean Absolute Error: 0.28 degrees.\n",
      "\n",
      "==============================================================================\n",
      "MAE:  0.2783159117305459\n",
      "MSE:  0.20502171893147503\n",
      "RMSE:  0.45279324081911276\n",
      "R2:  0.9805310977564\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Variable: Day                  Importance: 0.69\n",
      "Variable: hour                 Importance: 0.29\n",
      "Variable: minute               Importance: 0.01\n",
      "Variable: year_2020            Importance: 0.0\n",
      "Variable: month_1              Importance: 0.0\n",
      "Variable: month_2              Importance: 0.0\n",
      "Variable: month_3              Importance: 0.0\n",
      "Variable: month_4              Importance: 0.0\n",
      "Variable: month_5              Importance: 0.0\n",
      "Variable: month_6              Importance: 0.0\n",
      "Variable: month_7              Importance: 0.0\n",
      "Variable: month_8              Importance: 0.0\n",
      "Variable: month_9              Importance: 0.0\n",
      "Variable: month_10             Importance: 0.0\n",
      "Variable: month_11             Importance: 0.0\n",
      "Variable: month_12             Importance: 0.0\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "Target Feature: main_temp_max \n",
      "\n",
      "\n",
      "Training Features Shape: (2581, 16)\n",
      "Training Labels Shape: (2581,)\n",
      "Testing Features Shape: (861, 16)\n",
      "Testing Labels Shape: (861,)\n",
      "Mean Absolute Error: 0.31 degrees.\n",
      "\n",
      "==============================================================================\n",
      "MAE:  0.30740998838559813\n",
      "MSE:  0.24194146341463416\n",
      "RMSE:  0.49187545518620274\n",
      "R2:  0.9754847201966292\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Variable: Day                  Importance: 0.66\n",
      "Variable: hour                 Importance: 0.33\n",
      "Variable: minute               Importance: 0.01\n",
      "Variable: year_2020            Importance: 0.0\n",
      "Variable: month_1              Importance: 0.0\n",
      "Variable: month_2              Importance: 0.0\n",
      "Variable: month_3              Importance: 0.0\n",
      "Variable: month_4              Importance: 0.0\n",
      "Variable: month_5              Importance: 0.0\n",
      "Variable: month_6              Importance: 0.0\n",
      "Variable: month_7              Importance: 0.0\n",
      "Variable: month_8              Importance: 0.0\n",
      "Variable: month_9              Importance: 0.0\n",
      "Variable: month_10             Importance: 0.0\n",
      "Variable: month_11             Importance: 0.0\n",
      "Variable: month_12             Importance: 0.0\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "Target Feature: wind_speed \n",
      "\n",
      "\n",
      "Training Features Shape: (2581, 16)\n",
      "Training Labels Shape: (2581,)\n",
      "Testing Features Shape: (861, 16)\n",
      "Testing Labels Shape: (861,)\n",
      "Mean Absolute Error: 0.45 degrees.\n",
      "\n",
      "==============================================================================\n",
      "MAE:  0.4511181184668989\n",
      "MSE:  0.665969460963995\n",
      "RMSE:  0.8160695196881176\n",
      "R2:  0.891950983560572\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Variable: Day                  Importance: 0.65\n",
      "Variable: hour                 Importance: 0.31\n",
      "Variable: minute               Importance: 0.03\n",
      "Variable: year_2020            Importance: 0.0\n",
      "Variable: month_1              Importance: 0.0\n",
      "Variable: month_2              Importance: 0.0\n",
      "Variable: month_3              Importance: 0.0\n",
      "Variable: month_4              Importance: 0.0\n",
      "Variable: month_5              Importance: 0.0\n",
      "Variable: month_6              Importance: 0.0\n",
      "Variable: month_7              Importance: 0.0\n",
      "Variable: month_8              Importance: 0.0\n",
      "Variable: month_9              Importance: 0.0\n",
      "Variable: month_10             Importance: 0.0\n",
      "Variable: month_11             Importance: 0.0\n",
      "Variable: month_12             Importance: 0.0\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "Target Feature: wind_deg \n",
      "\n",
      "\n",
      "Training Features Shape: (2581, 16)\n",
      "Training Labels Shape: (2581,)\n",
      "Testing Features Shape: (861, 16)\n",
      "Testing Labels Shape: (861,)\n",
      "Mean Absolute Error: 7.29 degrees.\n",
      "\n",
      "==============================================================================\n",
      "MAE:  7.286504065040651\n",
      "MSE:  446.1720048780488\n",
      "RMSE:  21.122784022899275\n",
      "R2:  0.9019326542592403\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Variable: Day                  Importance: 0.64\n",
      "Variable: hour                 Importance: 0.33\n",
      "Variable: minute               Importance: 0.03\n",
      "Variable: year_2020            Importance: 0.0\n",
      "Variable: month_1              Importance: 0.0\n",
      "Variable: month_2              Importance: 0.0\n",
      "Variable: month_3              Importance: 0.0\n",
      "Variable: month_4              Importance: 0.0\n",
      "Variable: month_5              Importance: 0.0\n",
      "Variable: month_6              Importance: 0.0\n",
      "Variable: month_7              Importance: 0.0\n",
      "Variable: month_8              Importance: 0.0\n",
      "Variable: month_9              Importance: 0.0\n",
      "Variable: month_10             Importance: 0.0\n",
      "Variable: month_11             Importance: 0.0\n",
      "Variable: month_12             Importance: 0.0\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Target columns to be predicted.\n",
    "# ***************************************************************************************************************\n",
    "\n",
    "targetCols = ['main_temp','main_feels_like', 'main_pressure', 'main_humidity', \\\n",
    "             'main_temp_min', 'main_temp_max', 'wind_speed', 'wind_deg']\n",
    "\n",
    "# ***************************************************************************************************************\n",
    "dfML_inputPipe = dfMLweather_enc.drop(targetCols, axis = 1)\n",
    "print(\"Input columns \\n\", dfML_inputPipe.dtypes)\n",
    "\n",
    "# Saving input feature names for later use\n",
    "feature_list = list(dfML_inputPipe.columns)\n",
    "# Convert to numpy array\n",
    "features = np.array(dfML_inputPipe)\n",
    "\n",
    "# ***************************************************************************************************************\n",
    "# dfML_PipeLine = normaliseDF(dfMLweather_enc[targetCols])\n",
    "dfML_PipeLine = dfMLweather_enc[targetCols]\n",
    "\n",
    "# ***************************************************************************************************************\n",
    "\n",
    "for targetC in targetCols:\n",
    "\n",
    "    print(\"Target Feature:\", targetC, \"\\n\\n\")\n",
    "    \n",
    "    # Array of target variable\n",
    "    target = np.array(dfML_PipeLine[targetC])\n",
    "    \n",
    "    train_features, test_features, train_labels, test_labels = trainTestData(features, target)\n",
    "\n",
    "    # dates = dfML_enc_DA[:, feature_list.index('data_entry_timestamp')]\n",
    "\n",
    "    print('Training Features Shape:', train_features.shape)\n",
    "    print('Training Labels Shape:', train_labels.shape)\n",
    "    print('Testing Features Shape:', test_features.shape)\n",
    "    print('Testing Labels Shape:', test_labels.shape)\n",
    "\n",
    "    # baseLine()\n",
    "    rfWeatherModel = trainRandomForest(train_features, train_labels)\n",
    "    \n",
    "    # save the model\n",
    "    filename = targetC+'.pkl'\n",
    "    pickle.dump(rfWeatherModel, open(filename, 'wb'))\n",
    "\n",
    "    # load the model \n",
    "    rfWeatherModel_loaded = pickle.load(open(filename, 'rb'))\n",
    "\n",
    "    predictions = predictRandomForest(rfWeatherModel_loaded,test_features)\n",
    "    result(predictions,test_labels)\n",
    "    show_Importance(rfWeatherModel_loaded,features)\n",
    "    print(\"\\n\\n\\n\\n\\n\\n\\n\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Model needs input time in specific format : dateInput = [date hour minute year month1 month2 month3 .. month12]\n",
    "def get_TimeInputs(ts = datetime.datetime.now(), dayOfWeek = False, tStampRet = False, perHrs = 5, intervals = 30):\n",
    "    \n",
    "    tStampRetVal=[]\n",
    "    data_entry_timestamp_In = ts\n",
    "    ts =  pd.DataFrame([ts], columns = ['ts'])\n",
    "    data_entry_timestamp_In = pd.Timestamp(data_entry_timestamp_In)\n",
    "    data_entry_timestamp = data_entry_timestamp_In\n",
    "    \n",
    "    # Logic to find nearest value divisible by 10\n",
    "    minutes = data_entry_timestamp_In.minute\n",
    "    minutes = minutes + (30-(minutes%30))\n",
    "    \n",
    "    data_entry_timestamp = data_entry_timestamp.replace(minute = minutes) if (minutes != 60)\\\n",
    "                             else  data_entry_timestamp.round('H')\n",
    "\n",
    "     # obtain datetime range spacing 30 minutes for next \"perHrs\" hours by spacing of \"intervals\" minutes per hour    \n",
    "    dateRange = pd.DataFrame(pd.date_range(data_entry_timestamp, periods=perHrs*int(60/intervals), freq= str(intervals)+'min'), columns = ['ts'])\n",
    "    dateRange = pd.concat([ts, dateRange]).reset_index(drop = True)\n",
    "    dateRange['ts'] = pd.to_datetime(dateRange['ts'])\n",
    "\n",
    "    # Sort datetime into dataframe     \n",
    "    dateRange['date'] = dateRange.ts.dt.day \n",
    "    dateRange['hour'] = dateRange.ts.dt.hour \n",
    "    dateRange['minute'] = dateRange.ts.dt.minute \n",
    "    dateRange['year'] = dateRange.ts.dt.year \n",
    "    dateRange['month'] = dateRange.ts.dt.month\n",
    "    dateRange['dayOfWeek'] = dateRange.ts.dt.weekday\n",
    "\n",
    "    # prepare onhot encodes for year and month\n",
    "    mask = dateRange.year == 2020\n",
    "    column_name = 'year'\n",
    "    dateRange.loc[mask, column_name] = 1\n",
    "    \n",
    "    for m in range(1,13):\n",
    "        mask = dateRange.month == m\n",
    "        column_name = 'month'+str(m)\n",
    "        dateRange[column_name] = 0\n",
    "        dateRange.loc[mask, column_name] = 1\n",
    "        \n",
    "    dateRange = dateRange.drop(['month'], axis=1)\n",
    "    \n",
    "    if dayOfWeek:\n",
    "        for d in range(7):\n",
    "            mask = dateRange.dayOfWeek == d\n",
    "            column_name = 'dayOfWeek'+str(d)\n",
    "            dateRange[column_name] = 0\n",
    "            dateRange.loc[mask, column_name] = 1\n",
    "            \n",
    "    dateRange = dateRange.drop(['dayOfWeek'], axis=1)        \n",
    "\n",
    "    if tStampRet:\n",
    "          tStampRetVal = 1\n",
    "            \n",
    "    dateRange = dateRange.drop(['ts'], axis=1)      \n",
    "    \n",
    "    return(dateRange, tStampRetVal)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "def getWeather(datetimeIn = datetime.datetime.now()):\n",
    "    targetCols = ['main_temp','main_feels_like', 'main_pressure', 'main_humidity', \\\n",
    "                 'main_temp_min', 'main_temp_max', 'wind_speed', 'wind_deg']\n",
    "\n",
    "\n",
    "    test_features,tStampRetVal = np.array(get_TimeInputs(datetimeIn))\n",
    "    result = pd.DataFrame()\n",
    "\n",
    "    for targetC in targetCols: \n",
    "        # load the model     \n",
    "        filename = targetC+'.pkl'\n",
    "        rfWeatherModel_loaded = pickle.load(open(filename, 'rb'))\n",
    "\n",
    "        predictions = np.array(predictRandomForest(rfWeatherModel_loaded,test_features))\n",
    "        result[targetC] = predictions \n",
    "    \n",
    "    result = result.astype(int)\n",
    "    \n",
    "    return(result)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    main_temp  main_feels_like  main_pressure  main_humidity  main_temp_min  \\\n",
      "0           0               -4           1001             83              0   \n",
      "1           0               -4           1001             96              0   \n",
      "2           0               -5           1001             97              0   \n",
      "3           0               -4           1001             96              0   \n",
      "4           0               -5           1001             96              0   \n",
      "5           0               -4           1000             95              0   \n",
      "6           0               -5           1000             95              0   \n",
      "7           1               -4            999             82              0   \n",
      "8           1               -4           1000             83              0   \n",
      "9           1               -4            999             80              0   \n",
      "10          1               -4           1000             80              1   \n",
      "\n",
      "    main_temp_max  wind_speed  wind_deg  \n",
      "0               1           4       233  \n",
      "1               1           5       230  \n",
      "2               1           6       239  \n",
      "3               1           5       230  \n",
      "4               1           6       239  \n",
      "5               1           6       236  \n",
      "6               1           7       239  \n",
      "7               1           6       237  \n",
      "8               1           6       239  \n",
      "9               1           5       221  \n",
      "10              2           6       228  \n"
     ]
    }
   ],
   "source": [
    "print(getWeather())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "hide_code_all_hidden": false,
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
